{"version":3,"sources":["Tabs/Options.js","App.js","serviceWorker.js","index.js"],"names":["Options","props","state","toast","this","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","setState","ContentProps","message","id","action","IconButton","aria-label","color","className","classes","close","onClick","title","attr","style","FormControlLabel","Object","assign","paddingTop","controlElement","control","Checkbox","checked","native","onChange","label","I18n","t","tab","instance","common","onError","text","errorText","onLoad","clsx","column","columnSettings","renderToast","Component","withStyles","theme","width","minHeight","display","verticalAlign","marginRight","App","extendedProps","encryptedFields","translations","require","selectedTab","loaded","background","palette","default","primary","AppBar","position","Tabs","value","getSelectedTab","e","index","selectTab","target","parentNode","dataset","name","scrollButtons","Tab","data-name","isIFrame","tabContentIFrame","tabContent","socket","toString","onLoadConfig","adapterName","changed","cb","updateNativeValue","renderError","renderSaveCloseButtons","themeType","GenericApp","root","padding","height","overflow","Boolean","window","location","hostname","match","themeName","Utils","getThemeName","console","log","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35fc89fa.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport {MdClose as IconClose} from 'react-icons/md';\n\nimport I18n from '@iobroker/adapter-react/i18n';\nimport Logo from '@iobroker/adapter-react/Components/Logo';\n\nconst styles = theme => ({\n    tab: {\n        width: '100%',\n        minHeight: '100%'\n    },\n    column: {\n        display: 'inline-block',\n        verticalAlign: 'top',\n        marginRight: 20\n    },\n    columnSettings: {\n        width: 'calc(100% - 370px)',\n    },\n});\n\nclass Options extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            toast: '',\n        };\n    }\n\n\n    renderToast() {\n        if (!this.state.toast) {\n            return null;\n        }\n        return <Snackbar\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n            }}\n            open={true}\n            autoHideDuration={6000}\n            onClose={() => this.setState({toast: ''})}\n            ContentProps={{\n                'aria-describedby': 'message-id',\n            }}\n            message={<span id=\"message-id\">{this.state.toast}</span>}\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={this.props.classes.close}\n                    onClick={() => this.setState({toast: ''})}\n                >\n                    <IconClose />\n                </IconButton>,\n            ]}\n        />;\n    }\n\n    renderCheckbox(title, attr, style) {\n        return <FormControlLabel key={attr} style={Object.assign({paddingTop: 5}, style)} className={this.props.classes.controlElement}\n              control={\n                  <Checkbox\n                      checked={this.props.native[attr]}\n                      onChange={() => this.props.onChange(attr, !this.props.native[attr])}\n                      color=\"primary\"\n                  />\n              }\n              label={I18n.t(title)}\n        />;\n    }\n\n    render() {\n        return <form className={ this.props.classes.tab }>\n            <Logo\n                classes={{}}\n                instance={ this.props.instance }\n                common={ this.props.common }\n                native={ this.props.native }\n                onError={ text => this.setState({errorText: text}) }\n                onLoad={ this.props.onLoad }\n            />\n            <div className={clsx(this.props.classes.column, this.props.classes.columnSettings) }>\n                Place your code here\n            </div>\n            { this.renderToast() }\n        </form>;\n    }\n}\n\nOptions.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Options);\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader'\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport TabOptions from './Tabs/Options';\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px)',\r\n        overflow: 'auto'\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\r\n        overflow: 'auto'\r\n    }\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {...props};\r\n        extendedProps.encryptedFields = ['pass'];\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        super(props, extendedProps);\r\n    }\r\n\r\n    getSelectedTab() {\r\n        const tab = this.state.selectedTab;\r\n        if (!tab || tab === 'options') {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\r\n                <AppBar position=\"static\">\r\n                    <Tabs value={this.getSelectedTab()} onChange={(e, index) => this.selectTab(e.target.parentNode.dataset.name, index)} scrollButtons=\"auto\">\r\n                        <Tab label={I18n.t('Options')} data-name=\"options\" />\r\n                    </Tabs>\r\n                </AppBar>\r\n\r\n                <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n                    {(this.state.selectedTab === 'options' || !this.state.selectedTab) && <TabOptions\r\n                        key=\"options\"\r\n                        common={this.common}\r\n                        socket={this.socket}\r\n                        native={this.state.native}\r\n                        onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\r\n                        onLoad={native => this.onLoadConfig(native)}\r\n                        instance={this.instance}\r\n                        adapterName={this.adapterName}\r\n                        changed={this.state.changed}\r\n                        onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\r\n                    />}\r\n                </div>\r\n                {this.renderError()}\r\n                {this.renderSaveCloseButtons()}\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider} from '@material-ui/core/styles';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {version} from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'scheduler';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nif (false && window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\r\n        release: `iobroker.${window.adapterName}@${version}`,\r\n        integrations: [\r\n            new SentryIntegrations.Dedupe()\r\n        ]\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}